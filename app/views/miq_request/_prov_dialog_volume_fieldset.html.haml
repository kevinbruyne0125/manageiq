- url = url_for(:action => 'prov_field_changed', :id => "#{@edit[:req_id] || 'new'}") if @edit
- options = @options ? @options : @edit[:new]
- draw_fields = true
- counter = 1

%h3
  = label
.form-horizontal#add-volumes-form
  - while (draw_fields)
    #add-volume-fieldset
      - keys.each do |key|
        .form-group
          %label.col-md-2.control-label{:valign => "top"}
            = _(workflow.get_field(key, dialog)[:description])
          .col-md-8
            - if workflow.get_field(key, dialog)[:data_type] == :string
              %input.form-control{:type              => "text",
                                  :required          => workflow.get_field(key, dialog)[:required],
                                  :value             => options[:"#{key}_#{counter}"],
                                  :id                => "volumes__#{key}_#{counter}",
                                  :name              => "volumes__#{key}_#{counter}",
                                  "data-miq_observe" => {:interval => ".5", :url => url}.to_json}
            - elsif workflow.get_field(key, dialog)[:data_type] == :boolean
              %input{:checked           => options[:"volume_#{key}_#{counter}"],
                     :type              => "checkbox",
                     :id                => "volumes__#{key}_#{counter}",
                     :required          => workflow.get_field(key, dialog)[:required],
                     :name              => "volumes__#{key}_#{counter}",
                     "data-miq_observe" => {:interval => ".5", :url => url}.to_json}
          .col-md-2
      %hr
      %div
    - counter += 1
    - draw_fields = !options[:"volume_name_#{counter}"].blank? && !options[:"volume_size_#{counter}"].blank?

.form-horizontal
  .form-group
    .col-md-10
    .col-md-2
      %button#add-additional-volume-button
        Add Another Volume

:javascript
  (function(){
      var button = $("#add-additional-volume-button");

      button.click(function() {
        var sourceNode = $("#add-volume-fieldset");
        var node = duplicateNode(sourceNode, ["id", "name"]);

        sourceNode.parent().append(node);
      });

      var counter = #{counter};
      function duplicateNode(sourceNode, attributesToBump) {
        var out = sourceNode.clone(true);
        var nodes = out.find('*');

        $.each(nodes, function (ix, node) {
          $.each(attributesToBump, function (ix, attr) {
            if (node.hasAttribute(attr)) {
              $(node).prop(attr, increment_attr($(node).prop(attr)));
            }
          });
          node.value = '';
          node.checked = false;
        });

        function increment_attr(str) {
          str_pieces = str.split("_")
          str_pieces[str_pieces.length - 1] = counter;
          return str_pieces.join("_")
        }
        counter++;
        return out;
      }
  })();
