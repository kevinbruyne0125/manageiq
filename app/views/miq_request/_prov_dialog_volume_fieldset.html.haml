- url = url_for(:action => 'prov_field_changed', :id => "#{@edit[:req_id] || 'new'}") if @edit
- options = @options ? @options : @edit[:new]
- draw_fields = true
- counter = 1

%h3
  = label
.form-horizontal#add-volumes-form
  - while (draw_fields)
    #add-volume-fieldset
      .form-group
        %label.col-md-2.control-label{:valign => "top"}
          = _("Volume Name *")
        .col-md-8
          %input.form-control{:required => :required, :value => options[:"volume_name_#{counter}"], :type => "text", :id => "volumes__volume_name_#{counter}", :name => "volumes__volume_name_#{counter}", "data-miq_observe" => {:interval => ".5", :url => url}.to_json}
        .col-md-2
      .form-group
        %label.col-md-2.control-label{:valign => "top"}
          = _("Volume Size *")
        .col-md-8
          %input.form-control{:required => :required, :value => options[:"volume_size_#{counter}"], :type => "text", :id => "volumes__volume_size_#{counter}", :name => "volumes__volume_size_#{counter}", "data-miq_observe" => {:interval => ".5", :url => url}.to_json}
        .col-md-2
      .form-group
        %label.col-md-2.control-label{:valign => "top"}
          = _("Delete on Terminate?")
        .col-md-8
          %input{:checked => options[:"volume_delete_on_terminate_#{counter}"], :type => "checkbox", :id => "volumes__volume_delete_on_terminate_#{counter}", :name => "volumes__volume_delete_on_terminate_#{counter}", "data-miq_observe" => {:interval => ".5", :url => url}.to_json}
        .col-md-2
      %hr
      %div
    - counter += 1
    - draw_fields = !options[:"volume_name_#{counter}"].blank? && !options[:"volume_size_#{counter}"].blank?

.form-horizontal
  .form-group
    .col-md-10
    .col-md-2
      %button#add-additional-volume-button
        Add Another Volume

:javascript
  (function(){
      var button = $("#add-additional-volume-button");

      button.click(function() {
        var sourceNode = $("#add-volume-fieldset");
        var node = duplicateNode(sourceNode, ["id", "name"]);

        sourceNode.parent().append(node);
      });

      var counter = #{counter};
      function duplicateNode(sourceNode, attributesToBump) {
        var out = sourceNode.clone(true);
        var nodes = out.find('*');

        $.each(nodes, function (ix, node) {
          $.each(attributesToBump, function (ix, attr) {
            if (node.hasAttribute(attr)) {
              $(node).prop(attr, increment_attr($(node).prop(attr)));
            }
          });
          node.value = '';
          node.checked = false;
        });

        function increment_attr(str) {
          str_pieces = str.split("_")
          str_pieces[str_pieces.length - 1] = counter;
          return str_pieces.join("_")
        }
        counter++;
        return out;
      }
  })();
