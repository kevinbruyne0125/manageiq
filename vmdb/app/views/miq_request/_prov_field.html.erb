<% url = url_for(:action => 'prov_field_changed', :id=>"#{@edit[:req_id] || "new"}") if @edit %>
<%
# wf          The workflow object currently in use
# dialog      Dialog name (symbol)
# field       Field name (symbol)
options = @options ? @options : @edit[:new]
field_hash = wf.get_field(field, dialog)
return if field_hash.blank?
field_id = dialog.to_s + "__" + field.to_s
disabled ||= false
pfx = "miq_request/"
%>
<% unless field_hash[:display] == :hide || field_hash[:display] == :ignore %>
<%= render :partial => "layouts/dhtmlx_tags", :locals=>{:control=>"calendar"} %>
<script type="text/javascript">
  <%# Create from/to date JS vars to limit calendar starting from %>
  var miq_cal_dateFrom = miqCalendarDateConversion("<%= @timezone_offset%>");
</script>
  <% if ![:cluster_filter,:ds_filter,:host_filter,:rp_filter,:vm_filter].include?(field) %>
    <tr>
      <td class="key" valign="top"><%= field_hash[:description] %>
          <% if @edit && @edit[:new] && [:vm_description].include?(field) %> (<span id="description_count"><%= @edit[:new][:vm_description] ? @edit[:new][:vm_description].length : 0 %></span> / <%=  field_hash[:max_length]%>)<% end%>
          <% if @edit && field_hash[:required] && field_hash[:display] == :edit%> *<%  end %></td>
      <%# ### Text fields %>
      <% if [
              :cpu_limit,:cpu_reserve,:dns_servers,:dns_suffixes,:gateway,:hostname,:ip_addr,:linux_host_name,:linux_domain_name,:mac_address,:new_datastore_grow_increment,
              :new_datastore_max_size,:new_datastore_name,:new_datastore_size,:owner_address,:owner_city,:owner_company,:owner_country,:owner_department,:owner_email,
              :owner_first_name,:owner_last_name,:owner_load_ldap,:owner_office,:owner_manager,:owner_manager_mail,:owner_manager_phone,
              :owner_phone,:owner_phone_mobile,:owner_state,:owner_title,:owner_zip,:request_notes,:subnet_mask,:memory_limit,:memory_reserve,:root_password,:sysprep_password,
              :sysprep_domain_admin,:sysprep_domain_password,:sysprep_workgroup_name,:sysprep_full_name,:sysprep_organization,:sysprep_product_id,
              :sysprep_computer_name,:sysprep_per_server_max_connections,:vdi_desktop_pool_user_list,:vdi_new_desktop_pool_name,:vm_description,:vm_name,:wins_servers
            ].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <% if [:root_password,:sysprep_password,:sysprep_domain_password].include?(field) %>
              <%= password_field_tag(field_id,
                                  options[field],
                                  :maxlength=>MAX_NAME_LEN,
                                  :disabled=>disabled,
                                  "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
            <% elsif [:request_notes,:vm_description].include?(field) %>
              <%= text_area_tag(field_id,
                                options[field],
                                :maxlength=>field_hash[:max_length],
                                :size=>"25x4",
                                :counter=>"description_count",
                                "data-miq_check_max_length"=>true,
                                "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
            <% elsif [:vdi_desktop_pool_user_list].include?(field) %>
              <%= text_area_tag(field_id,
                                options[field],
                                :maxlength=>field_hash[:max_length],
                                :size=>"25x4",
                                "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
            <% else %>
              <% len =  field_hash[:max_length] ? field_hash[:max_length] : MAX_NAME_LEN %>
              <%= text_field_tag(field_id,
                                  options[field],
                                  :maxlength=>len,
                                  :disabled=>disabled,
                                  "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
            <% end %>
          <% else %>                                      <%# Just show the field value %>
            <% if [:root_password,:sysprep_password,:sysprep_domain_password].include?(field) %>
              <% if !options[field].nil? %>
                <% options[field].length.times do |i| %>
                  *
                <% end %>
              <% end %>
            <% else %>
              <%= options[field] %>
            <% end %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <% if field == :vm_name %>
              <%= field_hash[:notes] %> <%#  Removing h() so that '<font color='red'>' can be displayed in field %>
            <% else %>
              <%= field_hash[:notes] %>
            <% end %>
          <% end %>
        </td>
        <td>
          <% if field == :owner_email
               fh = wf.get_field(:owner_load_ldap, dialog)
               if @edit && field_hash[:display] == :edit && fh[:display] == :show && !@edit[:stamp_typ] %>
                 <ul id="form_buttons">
                   <li>
                     <%= image_tag('/images/formbuttons/lookup.png',
                           :border  => "0",
                           :class   => "button",
                           :style   => "height: 30px; width: 80px; margin-top: 1px",
                           :alt     => "LDAP Group Lookup",
                           :title   => "LDAP Group Lookup",
                           :onclick => "miqAjaxButton('#{url_for(
                                                         :controller => "miq_request",
                                                         :action     => 'retrieve_email',
                                                         :field      => fh[:pressed][:method],
                                                         :button     => "submit")}');") %>
                   </li>
                 </ul>
            <% end %>
          <% end %>
        </td>
      <%# text field for vm prefix/suffix %>
      <% elsif [:vm_prefix].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <%= text_field_tag(field_id,
                                options[field],
                                :maxlength=>MAX_NAME_LEN,
                                "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
            _(VM Number)_
            <% field_id1 = dialog.to_s + "__vm_suffix" %>
            <%#= h(i) %>
            <%= text_field_tag(field_id1,
                                options[:vm_suffix],
                                :maxlength=>MAX_NAME_LEN,
                                "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <% i = field.to_s.split('_').last %>
            <%= options[field] %>_(VM Number)_<%= options[:vm_suffix]%>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# text field or a Pull down for vm memory, depending upon existence of :values hash %>
      <% elsif [:vm_memory].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !field_hash[:values] && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <%= text_field_tag(field_id,
                                options[field].kind_of?(Array) ? options[field].last : options[field],
                                :maxlength=>MAX_NAME_LEN,
                                "data-miq_observe"=>{:interval=>'.5', :url=>url}.to_json) %>
          <% elsif @edit && field_hash[:display] == :edit && field_hash[:values] && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <%= select_tag(field_id,
                            options_for_select(
                              (!field_hash[:values].blank?  ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<No Choices Available>",nil]]) +
                                (Array(field_hash[:values].invert).sort{|a, b| a.first.to_i <=> b.first.to_i}),
                              options[field].is_a?(Array) ? options[field].first : options[field]),
                            :disabled=>disabled,
                            "data-miq_sparkle_on"=>true, "data-miq_sparkle_off"=>true,
                            "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <%= options[field].kind_of?(Array) ? options[field].last : options[field] %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# text Area field to display uploaded file contents %>
      <% elsif [:customization_template_script,:sysprep_upload_text].include?(field) %>
        <td class="wide">
          <%= text_area_tag(field_id, options[field],
                                :readonly=>"readonly", :style=>"width:600px;height:250px;") %>
        </td>
      <%# ### dhtmlxree control for tags fields %>
      <% elsif [:ldap_ous].include?(field) %>
        <td class="wide">
          <% tree_id = "ldap_ous_treebox" %>
          <div id="<%= tree_id%>" style="color:#000; overflow: hidden"></div>
          <%= render(:partial => "layouts/dynatree",
                     :locals => {
                       :tree_id               => tree_id,
                       :tree_name             => session[:tree_name],
                       :json_tree             => @temp[:ldap_ous_tree],
                       :onclick               => "miqOnClick_ProvLdapOus",
                       :click_url             => "/miq_request/prov_field_changed/#{@edit && @edit[:req_id] ? @edit[:req_id] : @miq_request ? @miq_request.id : "new"}",
                       :cfme_changes_check    => true,
                       :cookie_id_prefix      => "prov_trees",
                       :tree_state            => true
                     }
              )
          %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# ### wider Pull Down field that fits into 1280 wide screens %>
      <% elsif [:placement_folder_name].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
            <%= select_tag(field_id,
                            options_for_select(
                              (!field_hash[:values].blank?  ? (field_hash[:required] ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<None>",nil]]) : [["<No Choices Available>",nil]]) +
                                (field_hash[:data_type] == :integer ? Array(field_hash[:values].invert).sort{|a,b|a.first<=>b.first} : Array(field_hash[:values].invert).sort{|a,b|a.first.downcase<=>b.first.downcase}),
                            options[field].is_a?(Array) ? options[field].first : options[field]),
                            :disabled=>disabled,
                            :style=>"width:auto;",
                            "data-miq_sparkle_on"=>true, "data-miq_sparkle_off"=>true,
                            "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <%= options[field].last %>                  <%# Description is in the second, last, array element %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# ### Pull Down fields %>
      <% elsif [:instance_type,:guest_access_key_pair,:security_groups,:monitoring,:vm_tag_1,:vm_tag_2,:vm_tag_3,:vm_tag_4,:vm_tag_5,:vm_tag_6,:vm_tag_7,:vm_tag_8,:vm_tag_9,:vm_tag_10,:provision_type,
                :new_datastore_aggregate,:new_datastore_storage_controller,:new_datastore_volume,:network_adapters,:retirement,:retirement_warn,:cloud_network,:cloud_subnet,:floating_ip_address,
                :sysprep_auto_logon_count,:sysprep_domain_name,:sysprep_server_license_mode,:vdi_desktop_pool,:vdi_new_desktop_pool_assignment,:vdi_farm,:vlan].include?(field) %>
        <%# ### Multiple select Pull Down fields %>
        <% multiple = field == :security_groups %>
        <% td_class = field == :security_groups ? "wider" : "wide" %>
        <td class="<%=td_class%>">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
            <%= select_tag(field_id,
                            options_for_select(
                              (!field_hash[:values].blank?  ? (field_hash[:required] ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<None>",nil]]) : [["<No Choices Available>",nil]]) +
                                (field_hash[:data_type] == :integer ? Array(field_hash[:values].invert).sort{|a,b|a.last<=>b.last} : Array(field_hash[:values].invert).sort{|a,b|a.first.downcase<=>b.first.downcase}),
                              options[field].is_a?(Array) && !multiple ? options[field].first : options[field]),
                            :multiple => multiple,
                            :disabled=>disabled,
                            "data-miq_sparkle_on"=>true, "data-miq_sparkle_off"=>true,
                            "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>                            <%# Just show the field value %>
            <% if multiple %>
              <% options[field].each_with_index do |val, i| %>
                <%= field_hash[:values][val] %>
                <% if i < options[field].length-1 %><br><% end %>
              <% end %>
            <% else %>
              <%= options[field].last %>        <%# Description is in the second, last, array element %>
            <% end %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# ### dhtmlxree control for tags fields %>
      <% elsif [:tag_ids,:vm_tags].include?(field) %>
        <td class="wide">
          <% tree_id = "all_tags_treebox" %>
          <div id="<%=tree_id%>" style="color:#000; overflow: hidden"></div>
          <%= render(:partial => "layouts/dynatree",
               :locals => {
                 :tree_id                     => tree_id,
                 :tree_name                   => "all_tags_tree",
                 :json_tree                   => @temp[:all_tags_tree],
                 :oncheck                     => "miqOnCheck_ProvTags",
                 :check_url                   => "/miq_request/prov_field_changed/#{@edit && @edit[:req_id] ? @edit[:req_id] : @miq_request ? @miq_request.id : "new"}",
                 :exp_tree                    => @edit ? false : true,
                 :no_tree_lines               => true,
                 :multi_lines                 => true,
                 :checkboxes                  => true,
                 :open_close_all_on_dbl_click => true,
                 :cookie_id_prefix            => "prov_trees",
                 :tree_state                  => true
               }
            )
          %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
          <div class="note">* Only a single value can be assigned from these Tag Categories</div>
        </td>
      <%# ### Pull Down fields that need to be sorted on description %>
      <% elsif [:attached_ds,:iso_image_id,:placement_availability_zone,:placement_cluster_name,
                :placement_dc_name,:placement_ds_name,:placement_ems_name,:placement_host_name,
                :placement_rp_name,:pxe_image_id,:windows_image_id,:src_host_ids,:src_vm_id,
                :sysprep_custom_spec,:customization_template_id].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
            <% if field == :src_vm_id %>
              <%#  grid for src_vm_id %>
              <%= render(:partial => "#{pfx}prov_vm_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :placement_host_name %>
              <%#  grid for hosts %>
              <%= render(:partial => "#{pfx}prov_host_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :placement_ds_name %>
              <%#  grid for datastores %>
              <%= render(:partial => "#{pfx}prov_ds_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :attached_ds %>
              <%#  grid for datastores %>
              <%= render(:partial => "#{pfx}prov_ds_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :sysprep_custom_spec %>
              <%#  grid for sysprep_custom_spec %>
              <%= render(:partial => "#{pfx}prov_vc_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :customization_template_id %>
              <%#  grid for customization script %>
              <%= render(:partial => "#{pfx}prov_template_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :pxe_image_id %>
              <%#  grid for pxe_images %>
              <%= render(:partial => "#{pfx}prov_pxe_img_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :iso_image_id %>
              <%#  grid for iso_images %>
              <%= render(:partial => "#{pfx}prov_iso_img_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :windows_image_id %>
              <%= render(:partial => "#{pfx}prov_windows_image_grid", :locals=>{:field_id=>field_id}) %>
            <% else %>
              <%= select_tag(field_id,
                              options_for_select(
                                (!field_hash[:values].blank?  ? (field_hash[:required] ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<None>",nil]]) : [["<No Choices Available>",nil]]) +
                                  Array(field_hash[:values].invert).sort{|a,b|a.first.downcase<=>b.first.downcase},
                                options[field].is_a?(Array) ? options[field].first : options[field]),
                              :style=>"width:auto;",
                              "data-miq_sparkle_on"=>true,
                              "data-miq_sparkle_off"=>true,
                              "data-miq_observe"=>{:url=>url}.to_json) %>
            <% end %>
          <% else %>                                      <%# Just show the field value %>
            <% if field == :src_host_ids %>
              <%#  read only grid for src_host_id %>
              <%= render(:partial => "#{pfx}prov_host_grid", :locals=>{:field_id=>field_id}) %>
            <% elsif field == :attached_ds %>
              <%= options[:attached_ds_names].to_miq_a.join(",") %>                 <%# Description is in the second, last, array element %>
            <% elsif options[field] %>
              <%= options[field].last %>                  <%# Description is in the second, last, array element %>
            <% end %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# ### Pull Down for fields that dont need <None> in the list%>
      <% elsif [:pxe_server_id,:number_of_vms,:number_of_cpus,:number_of_sockets,:cores_per_socket,:snapshot,:sysprep_enabled].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
              <%= select_tag(field_id,
                              options_for_select(
                                (!field_hash[:values].blank?  ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<No Choices Available>",nil]]) +
                                  (field_hash[:data_type] == :integer ? Array(field_hash[:values].invert).sort{|a,b|a.last<=>b.last} : Array(field_hash[:values].invert).sort{|a,b|a.first<=>b.first}),
                                options[field].is_a?(Array) ? options[field].first : options[field]
                                ),
                              :disabled=>disabled,
                              "data-miq_sparkle_on"=>true,
                              "data-miq_sparkle_off"=>true,
                              "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <%= options[field].last %>                  <%# Description is in the second, last, array element %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# Pull down with Array of Arrays %>
      <% elsif [:sysprep_timezone].include?(field) %>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
            <% if field_hash[:values].length == 1 %>      <%# Only 1 choice, show the value %>
              <%= options[field].last %>                <%# Description is in the second, last, array element %>
            <% else %>
              <%= select_tag(field_id,
                              options_for_select(
                                (!field_hash[:values].blank?  ? (field_hash[:required] ? (field_hash[:default] ? [] : [["<Choose>",nil]]) : [["<None>",nil]]) : [["<No Choices Available>",nil]]) +
                                  field_hash[:values],
                                options[field].is_a?(Array) ? options[field].first : options[field]),
                              :disabled=>disabled,
                              "data-miq_sparkle_on"=>true,
                              "data-miq_sparkle_off"=>true,
                              "data-miq_observe"=>{:url=>url}.to_json) %>
            <% end %>
          <% else %>                                      <%# Just show the field value %>
            <%= options[field].last %>                  <%# Description is in the second, last, array element %>
          <% end %>
        </td>
      <%# ### Checkbox fields %>
      <% elsif [:linked_clone,:new_datastore_autogrow,:new_datastore_create,:new_datastore_thin_provision,
                :placement_auto,:stateless, :sysprep_auto_logon,:sysprep_change_sid,:sysprep_delete_accounts,
                :sysprep_spec_override,:vdi_desktop_pool_create,:vdi_enabled,:vm_auto_start].include?(field) %>
        <td style="vertical-align: top">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <% checked = options[field] && options[field][0].to_s == "true" %>
            <%= check_box_tag(field_id, value=true,
                                checked=checked,
                                :disabled=>disabled,
                                "data-miq_sparkle_on"=>true, "data-miq_sparkle_off"=>true,
                                "data-miq_observe_checkbox"=>{:url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <% checked = options[field] && options[field][0].to_s == "true" %>
            <%= check_box_tag(field_id, value=true, checked=checked, :id=>field_id, :disabled=>true)%>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      <%# ### Radio Button fields %>
      <% elsif [:addr_mode,:disk_format,:new_datastore_fs_type,:sysprep_identification,:schedule_type].include?(field) %>
        <td>
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <%# need to specify Checked/Disabled to check or disable a checkbox, so need separate lines for each depending upon radio button state%>
            <% field_hash[:values].each do |f| %>
              <% if options[field] && options[field][0] ==  f[0] %>
                <% if disabled %>
                  <input type="radio" id="<%=field_id%>" value="<%=f[0]%>" name="<%=field_id%>" disabled checked>
                <% else %>
                  <input type="radio" id="<%=field_id%>" value="<%=f[0]%>" name="<%=field_id%>" checked onclick="<%=remote_function(:with => 'Form.Element.serialize(this)', :url => { :action =>'prov_field_changed', :id=>"#{@edit[:req_id] || "new"}"}, :loading=>"miqSparkle(true);", :complete=>"miqSparkle(false);") %>">
                <% end %>
              <% else %>
                <% if disabled %>
                  <input type="radio" id="<%=field_id%>" value="<%=f[0]%>" name="<%=field_id%>" disabled>
                <% else %>
                  <input type="radio" id="<%=field_id%>" value="<%=f[0]%>" name="<%=field_id%>" onclick="<%=remote_function(:with => 'Form.Element.serialize(this)', :url => { :action =>'prov_field_changed', :id=>"#{@edit[:req_id] || "new"}"}, :loading=>"miqSparkle(true);", :complete=>"miqSparkle(false);") %>">
                <% end %>
              <% end %>
              <%= f[1] %>
            <% end %>
          <% else %>
                <%= options[field][1] %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
    <% elsif [:schedule_time].include?(field) %>
      <td>
        <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
          <%= text_field_tag("miq_date_1",
                              options[:start_date],
                              :class=>"css1",
                              :readonly=>"true",
                              "data-miq_observe_date"=>{:url=>url}.to_json) %>
        <% else %>
          <%= options[:start_date] %>
        <% end %>
        </td>
        </tr>
        <tr>
        <td class="key">Starting Time (<%= get_timezone_abbr("user") %>)</td>
        <td>
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of the text field %>
            <%= select_tag("start_hour",
                              options_for_select(Array.new(24) {|i| i},options[:start_hour].to_i),
                              "data-miq_observe"=>{:url=>url}.to_json) %>
            <%= select_tag("start_min",
                              options_for_select(Array.new(12) {|i| i*5},options[:start_min].to_i),
                              "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>
            <%= options[:start_hour] %>h&nbsp;<%= options[:start_min] %>m
          <% end %>
        </td>
      <% elsif [:sysprep_upload_file].include?(field) %>
        <td>
          <%= form_tag({:action=>"upload", :id=>"#{@edit[:req_id] || "new"}"}, :multipart => true) do %>
              <%= file_field("upload", "file") %>
              <%= submit_tag("Upload", :class => "upload"  ) %>
          <% end %>
          </td>
      <% end %>
    </tr>
  <%# ### Filter Pull Down fields, show them only if there are any values %>
  <% else %>
    <% if !field_hash[:values].blank? %>
      <tr>
        <td class="key"><%= field_hash[:description] %><% if @edit && field_hash[:required] && field_hash[:display] == :edit%> *<%  end %></td>
        <td class="wide">
          <% if @edit && field_hash[:display] == :edit && !@edit[:stamp_typ] %> <%# Allow editing of this pulldown field %>
              <%= select_tag(field_id,
                              options_for_select([["<ALL>",0]] + (field_hash[:data_type] == :integer ? Array(field_hash[:values].invert).sort{|a,b|a.last<=>b.last} : Array(field_hash[:values].invert).sort{|a,b|a.first<=>b.first}),
                                options[field].is_a?(Array) ? options[field].first : options[field]),
                              :style=>"width:auto;",
                              "data-miq_sparkle_on"=>true,
                              "data-miq_sparkle_off"=>true,
                              "data-miq_observe"=>{:url=>url}.to_json) %>
          <% else %>                                      <%# Just show the field value %>
            <%= options[field].last %>                  <%# Description is in the second, last, array element %>
          <% end %>
          <%#  Display notes if available %>
          <% unless field_hash[:notes_display] == :hide || field_hash[:notes].blank? %>
            <%= field_hash[:notes] %>
          <% end %>
        </td>
      </tr>
    <% end %>
  <% end %>
  <%# Need this to bind checkbox observers when under DHTMLX tabs %>
  <%# TODO: Remove when DHTMLX tabs are converted to jQuery tabs  %>
  <script>miqObserveCheckboxes();</script>
<% end %>
