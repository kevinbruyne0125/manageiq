<% url = url_for(:action => 'form_field_changed', 
                 :id     => "#{@edit[:rpt_id] || "new"}") 
%>

<%# JSON hash to hold text fields and types for miqValueStylePrefill %>
<%= javascript_tag("miq_value_styles = {};") %>
<div id="styling_div">
  <p class="legend">Specify Column Styles</p>
  <table class="style3">
    <thead>
      <tr>
        <% len = 0 %>
        <% @edit[:new][:field_order].each_with_index do |f, f_idx| %>
          <% len = f.first.length if f.first.length > len  %>
        <% end %>
        <% width = len > 70 ? "400px;" : "auto" %>
        <th style="width:<%=width%>">Column Name</th>
        <th>Style</th>
        <th>If</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <% @edit[:new][:field_order].each_with_index do |f, f_idx| %>
        <% field_type = MiqExpression.get_col_info(f.last.split("__").first)[:format_sub_type] %>
        <% col_name = f.last.include?(".") ? f.last.split(".").last.gsub("-", ".") : f.last.split("-").last %>
        <% styles = @edit.fetch_path(:new, :col_options, col_name, :style) || [] %>
        <tr>
          <td class="key"><%= h(f.first) %></td>
          <td>
            <% (0..2).each do |s_idx| %>
              <% break if s_idx > 0 &&
                          (styles[s_idx - 1].blank? ||
                           styles[s_idx - 1][:operator] == "DEFAULT") %>
              <% if s_idx > 0 %>
                <br/>
              <% end %>
              <%= select_tag("style_#{f_idx}_#{s_idx}",
                            options_for_select([[styles[s_idx] ? "<Remove>" : "<Normal>", nil]] +
                                              ReportHelper::STYLE_CLASSES.invert.to_a.sort{|a,b| a.first.downcase<=>b.first.downcase},
                                              styles[s_idx] ? styles[s_idx][:class] : nil),
                            "data-miq_sparkle_on" => true,
                            "data-miq_observe"    => {:url => url}.to_json) 
              %>
            <% end %>
          </td>
          <td>
            <% (0..2).each do |s_idx| %>
              <% break if s_idx > 0 &&
                          (styles[s_idx - 1].blank? ||
                           styles[s_idx - 1][:operator] == "DEFAULT") %>
              <% if s_idx > 0 %>
                <br/>
              <% end %>
              <% if styles[s_idx] && styles[s_idx][:class] %>
                <%= select_tag("styleop_#{f_idx}_#{s_idx}",
                               options_for_select([["Default", "DEFAULT"]] + MiqExpression.get_col_style_operators(f.last),
                                                styles[s_idx].nil? ? nil : styles[s_idx][:operator]),
                               :multiple             => false, 
                               :class                => "widthed",
                               "data-miq_sparkle_on" => true,
                               "data-miq_observe"    => {:url => url}.to_json) 
                %>
                <% unless styles[s_idx][:operator] == nil ||
                          styles[s_idx][:operator] == "DEFAULT" ||
                          styles[s_idx][:operator].include?("NULL") ||
                          styles[s_idx][:operator].include?("EMPTY") %>
                  <% if field_type == :boolean %>
                    <% values = [["true","true"],["false","false"]] %>
                    <%= select_tag("styleval_#{f_idx}_#{s_idx}",
                                   options_for_select(values,
                                                      styles[s_idx][:value]),
                                   :multiple              => false, 
                                   :class                 => "widthed",
                                   "data-miq_sparkle_on"  => true, 
                                   "data-miq_sparkle_off" => true,
                                   "data-miq_observe"     => {:url => url}.to_json) %>
                  <% elsif [:datetime, :date].include?(field_type) %>
                    <%= select_tag("styleval_#{f_idx}_#{s_idx}",
                                  options_for_select((field_type == :datetime ? FROM_HOURS : []) +
                                                      FROM_DAYS +
                                                      FROM_WEEKS +
                                                      FROM_MONTHS +
                                                      FROM_QUARTERS +
                                                      FROM_YEARS,
                                                    styles[s_idx][:value]),
                                  :multiple              => false,
                                  "data-miq_sparkle_on"  => true, 
                                  "data-miq_sparkle_off" =>true,
                                  "data-miq_observe"     => {:url=>url}.to_json) 
                    %>
                  <% else %>

                    <%# Add the text field id and type into the JSON miq_value_styles hash for miqValueStylePrefill %>
                    <%= javascript_tag("miq_value_styles['styleval_#{f_idx}_#{s_idx}'] = '#{field_type}';") %>

                    <%= text_field_tag("styleval_#{f_idx}_#{s_idx}", 
                                       styles[s_idx][:value], 
                                       :maxlength         => 50,
                                       "data-miq_observe" => {:interval => '.5', 
                                                              :url      => url}.to_json) 
                    %>
                    <% if field_type == :percent %>
                      %
                    <% elsif FORMAT_SUB_TYPES.fetch_path(field_type, :units) %>
                      <%= select_tag("stylesuffix_#{f_idx}_#{s_idx}",
                                     options_for_select(FORMAT_SUB_TYPES[field_type][:units],
                                                        styles[s_idx][:value_suffix]),
                                     :multiple              => false, 
                                     :class                 => "widthed",
                                     "data-miq_sparkle_on"  => true, 
                                     "data-miq_sparkle_off" => true,
                                     "data-miq_observe"     => {:url => url}.to_json) 
                      %>
                    <% end %>
                  <% end %>
                <% end %>
              <% elsif !styles[s_idx] %>
                Default
              <% end %>
            <% end %>
          </td>
          <td>
            <table class="admintable" cellspacing="0" cellpadding="0" style="padding:0px">
              <tbody>
                <% (0..2).each do |s_idx| %>
                  <tr style="padding:0px">
                    <td style="padding:0px">
                      <% break if s_idx > 0 &&
                                  (styles[s_idx - 1].blank? ||
                                   styles[s_idx - 1][:operator] == "DEFAULT") %>
                      <% if s_idx > 0 %>

                      <% end %>
                      <% if styles[s_idx] && styles[s_idx][:class] %>
                        <span class="<%=  styles[s_idx][:class].to_s %>">
                          &nbsp;Sample&nbsp;
                        </span>
                      <% end %> 
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>
  <br/>* Style "If" conditions are evaluated top to bottom for each column
</div>

<%# Initiate the prefill function to show text field background images when empty %>
<%= javascript_tag("miqValueStylePrefill();") %>
