- url = url_for(:action => 'dialog_field_changed', :id => @edit[:rec_id] || "new") if @edit
- dialog_mode = @edit[:dialog_mode] if @edit
- edit = case dialog_mode
- when :reconfigure then field.reconfigurable
- when :review      then false
- else                   !@edit.nil?
%tr{:id => "field_#{field.id}_tr"}
  %td.key{:title => field.description}
    = field.label
  %td{:title => field.description}
    - case field.type
      - when 'DialogFieldTextBox'
        - if edit
          - if field.protected?
            = password_field_tag(field.name + "__protected", field.value,
                                 :maxlength         => 50,
                                 :class             => "dynamic-text-box-#{field.id}",
                                 "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
          - else
            = text_field_tag(field.name, field.value,
                             :maxlength         => 50,
                             :class             => "dynamic-text-box-#{field.id}",
                             "data-miq_observe" => {:interval => '.5', :url => url}.to_json)

          - if field.dynamic && field.show_refresh_button?
            = button_tag('Refresh', :id => "refresh-dynamic-text-field-#{field.id}", :class => "btn btn-default")

            :javascript
              $('#refresh-dynamic-text-field-#{field.id}').click(function() {
                miqSparkleOn();

                var fieldId = "#{field.id}";
                var fieldName = "#{field.name}";

                $.post('dynamic_text_box_refresh', {name: fieldName}, function(data) {
                  $('.dynamic-text-box-' + fieldId).val(data.values.text);
                  miqSparkleOff();
                });
              });

        - else
          - if field.protected?
            ********
          - else
            = h(field.value)

      - when 'DialogFieldTextAreaBox'
        - if edit
          = text_area_tag(field.name,
                          field.value,
                          :class             => "dynamic-text-area-#{field.id}",
                          :maxlength         => 8192,
                          :size              => "50x6",
                          "data-miq_observe" => {:interval => '.5', :url => url}.to_json)
        - else
          = h(field.value)

        - if field.dynamic && field.show_refresh_button?
          = button_tag('Refresh', :id => "refresh-dynamic-text-field-#{field.id}", :class => "btn btn-default")

          :javascript
            $('#refresh-dynamic-text-field-#{field.id}').click(function() {
              miqSparkleOn();

              var fieldId = "#{field.id}";
              var fieldName = "#{field.name}";

              $.post('dynamic_text_box_refresh', {name: fieldName}, function(data) {
                $('.dynamic-text-area-' + fieldId).val(data.values.text);
                miqSparkleOff();
              });
            });

      - when 'DialogFieldCheckBox'
        = check_box_tag(field.name, "1", field.checked?,
                        :disabled                   => !edit,
                        :class                      => "dynamic-checkbox-#{field.id}",
                        "data-miq_sparkle_on"       => true,
                        "data-miq_sparkle_off"      => true,
                        "data-miq_observe_checkbox" => {:url => url}.to_json)

        - if field.dynamic && field.show_refresh_button?
          = button_tag('Refresh', :id => "refresh-dynamic-checkbox-#{field.id}", :class => "btn btn-default")

          :javascript
            $('#refresh-dynamic-checkbox-#{field.id}').click(function() {
              miqSparkleOn();

              var fieldId = "#{field.id}";
              var fieldName = "#{field.name}";

              $.post('dynamic_checkbox_refresh', {name: fieldName}, function(data) {
                $('.dynamic-checkbox-' + fieldId).prop('checked', data.values.checked);
                miqSparkleOff();
              });
            });

      - when 'DialogFieldDateControl', 'DialogFieldDateTimeControl'
        - if field.type == "DialogFieldDateControl"
          - if edit
            = text_field_tag("miq_date__#{field.name}",
                             field.value,
                             :class                  => "css1 dynamic-date-#{field.id}",
                             :readonly               => "true",
                             "data-miq_observe_date" => {:url => url}.to_json)
          - else
            = field.value

        - if field.type == "DialogFieldDateTimeControl"
          - date_val = field.refresh_json_value
          - if edit
            = text_field_tag("miq_date__#{field.name}",
                             date_val[:date],
                             :class                  => "css1 dynamic-date-#{field.id}",
                             :readonly               => "true",
                             "data-miq_observe_date" => {:url => url}.to_json)
          - else
            = date_val[:date]

          &nbsp;at&nbsp;
          - if edit
            = select_tag("start_hour",
                         options_for_select(Array.new(24) {|i| i.to_s.rjust(2, '0')}, date_val[:hour]),
                         :class => "dynamic-date-hour-#{field.id}",
                         "data-miq_observe" => {:url => url}.to_json)
            = ':'
            = select_tag("start_min",
                         options_for_select(Array.new(59) {|i| i.to_s.rjust(2, '0')}, date_val[:min]),
                         :class => "dynamic-date-min-#{field.id}",
                         "data-miq_observe" => {:url => url}.to_json)
          - else
            = "#{date_val[:hour].rjust(2, '0')}:#{date_val[:min].rjust(2, '0')}"
          &nbsp;
          = session[:user_tz]

        - if field.dynamic && field.show_refresh_button?
          = button_tag('Refresh', :id => "refresh-dynamic-date-#{field.id}", :class => "btn btn-default")

          :javascript
            $('#refresh-dynamic-date-#{field.id}').click(function() {
              miqSparkleOn();

              var fieldId = "#{field.id}";
              var fieldName = "#{field.name}";

              $.post('dynamic_date_refresh', {name: fieldName}, function(data) {
                $('.dynamic-date-' + fieldId).val(data.values.date);

                if (data.values.hour !== undefined && data.values.min !== undefined) {
                  $('.dynamic-date-hour-' + fieldId).val(data.values.hour);
                  $('.dynamic-date-min-' + fieldId).val(data.values.min);
                }

                miqSparkleOff();
              });
            });

      - when 'DialogFieldDynamicList'
        - if edit
          = select_tag(field.name,
                       options_for_select(field.values.collect(&:reverse), wf.value(field.name)),
                       'data-miq_sparkle_on'  => true,
                       'data-miq_sparkle_off' => true,
                       'data-miq_observe'     => { :url => url }.to_json)
          - if field.show_refresh_button?
            = button_tag(_('Refresh'),
                         :onclick  => remote_function(:url      => { :action => 'dynamic_list_refresh',
                                                                     :id     => field.name },
                                                      :loading  => "miqSparkle(true);",
                                                      :complete => "miqSparkle(false);"))
        - else
          = h(field.values.detect { |k, _v| k == wf.value(field.name) }.try(:last) || wf.value(field.name))

      - when 'DialogFieldDropDownList', 'DialogFieldRadioButton'
        - if edit
          - if field.values.length > 1
            - if field.type == "DialogFieldDropDownList"
              - select_values = dialog_dropdown_select_values(field, wf.value(field.name))
              = select_tag(field.name, options_for_select(select_values, wf.value(field.name)),
                           "data-miq_sparkle_on"  => true,
                           "data-miq_sparkle_off" => true,
                           "data-miq_observe"     => {:url => url}.to_json)
            - else
              %span(class="dynamic-radio-#{field.id}")
                - values = field.values
                - values = [['', "<#{_('None')}>"]] + values if !field.required && !field.dynamic
                - values.each_with_index do |rb, i|
                  %input{:type     => 'radio',
                         :id       => field.id,
                         :value    => rb[0],
                         :name     => field.name,
                         :checked  => field.default_value.to_s == rb[0].to_s ? '' : nil,
                         :onclick  => remote_function(:with     => "miqSerializeForm('dialog_tabs')",
                                                      :url      => { :action => 'dialog_field_changed',
                                                                     :id     => "#{(@edit && @edit[:rec_id]) || "new"}"},
                                                      :loading  => "miqSparkle(true);",
                                                      :complete => "miqSparkle(false);")}
                  %label.dynamic-radio-label= rb[1]

          - else
            = h(field.values[0].last) if !field.values.empty?

        - else
          = h(field.values.detect { |k, _v| k == wf.value(field.name) }.try(:last) || wf.value(field.name))

        - if field.dynamic && field.show_refresh_button?
          = button_tag(_('Refresh'), :id => "refresh-dynamic-field-#{field.id}", :class => "btn btn-default")

          :javascript
            $('#refresh-dynamic-field-#{field.id}').click(function() {
              miqSparkleOn();

              var fieldId = "#{field.id}";
              var fieldName = "#{field.name}";
              var checkedValue = $('input:radio[name="#{field.name}"]:checked').val();

              $.post('dynamic_radio_button_refresh', {name: fieldName, checked_value: checkedValue}, function(data) {
                var radioButtons = [];

                $.each(data.values.refreshed_values, function(index, value) {
                  var radio = '<input type="radio" ';
                  radio += 'id="' + fieldId + '" ';
                  radio += 'value="' + value[0] + '" ';
                  radio += 'name="' + fieldName + '" ';
                  if (data.values.checked_value === value[0].toString()) {
                    radio += 'checked="" ';
                  }
                  radio += 'onclick="' + "#{remote_function(
                    :with     => 'miqSerializeForm(\'dialog_tabs\')',
                    :url      => {:action => 'dialog_field_changed', :id => (@edit && @edit[:rec_id]) || 'new'},
                    :loading  => 'miqSparkle(true);',
                    :complete => 'miqSparkle(false);'
                  )}" + '"';
                  radio += '/> ';
                  radio += $('<label></label>').addClass('dynamic-radio-label').text(value[1]).prop('outerHTML');
                  radio += ' ';
                  radioButtons.push(radio);
                });

                $('.dynamic-radio-' + fieldId).html(radioButtons);

                miqSparkleOff();
              });
            });

      - when 'DialogFieldButton'
        = button_tag(_("Save"),
                    :class => edit ? 'btn btn-primary' : 'btn btn-primary btn-disabled')

      - when 'DialogFieldTagControl'
        - category_tags = DialogFieldTagControl.category_tags(field.category).map { |cat| [cat[:description], cat[:id]] }
        - if edit
          - if field.single_value?
            - select_values = dialog_dropdown_select_values(field, wf.value(field.name), category_tags)
            = select_tag(field.name, options_for_select(select_values, wf.value(field.name)),
                         "data-miq_sparkle_on"  => true,
                         "data-miq_sparkle_off" => true,
                         "data-miq_observe"     => {:url => url}.to_json)
          - else
            = select_tag(field.name, options_for_select(category_tags, wf.value(field.name)),
                         :multiple              => true,
                         "data-miq_sparkle_on"  => true,
                         "data-miq_sparkle_off" => true,
                         "data-miq_observe"     => {:url => url}.to_json)
        - else
          - value = wf.value(field.name) || ''
          - classification_ids = value.split(',')
          = h(Classification.where(:id => classification_ids).collect(&:description).join(', '))
