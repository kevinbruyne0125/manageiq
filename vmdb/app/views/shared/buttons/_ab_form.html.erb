<% url = url_for(:action =>'automate_button_field_changed') %>
<div id="ab_form">

	<ul id="policy_bar" style="margin-top:5px;">
		<% if @resolve[:uri] && Hash[*@resolve[:target_classes].flatten][@resolve[:target_class]] == @edit[:new][:target_class] %>
			<li>
					<%= link_to(image_tag("/images/toolbars/paste.png", :border=>"0", :class=>"", :alt=>"Paste object details for use in a Button."),
									{:action=>"resolve", :button=>"paste"},
									"data-miq_sparkle_on" => true,
									"data-miq_sparkle_off" => true,
									:remote=>true,
									:title=>"Paste object details for use in a Button.") %>
			</li>
		<% else %>
			<%= image_tag("/images/toolbars/paste.png",	:class=>"dimmed",:title=>"Paste is not available, no object information has been copied from the Simulation screen") %>
		<% end %>
	</ul>

	<%= render(:partial=>"layouts/flash_msg", :locals=>{:top_pad=>10}) %>

	<fieldset>
		<p class="legend">Action</p>
		<table class="style1">
			<tr>
				<td class="key">Button Text</td>
				<td>
					<%= text_field_tag("name",
															@edit[:new][:name],
															:maxlength=>30,
															"data-miq_observe"=>{:url=>url}.to_json) %>
          &nbsp;
          <%= check_box_tag("display", value="1",
                            checked=@edit[:new][:display],
                            "data-miq_observe_checkbox"=>{:url=>url}.to_json)%>&nbsp;Display on Button
				</td>
				<% if !is_browser_ie? %>
					<%= javascript_tag("$('name').focus()") %>
				<% end %>
			</tr>
			<tr>
				<td class="key">Button Hover Text</td>
				<td class="wide">
					<%= text_field_tag("description",
															@edit[:new][:description],
															:maxlength=>50,
															"data-miq_observe"=>{:url=>url}.to_json) %>
				</td>
			</tr>
			<tr>
				<td class="key">Button Image</td>
				<td>
					<%#= select("button","id", Array.new(5) {|i| i+1},
											{:selected=>@edit[:new][:button_id].to_i}, {:class=>"threedigit"}) %>
					<% combo_id = "button_div" %>
					<% combo_name = "button_image" %>
						<div id="<%=combo_id%>"></div>
						<%= render :partial => 'layouts/dhtmlxcombo',
														:locals=>{:combo_id=>combo_id,
																			:combo_name=>combo_name,
																			:combo_width=>50,
																			:combo_url=>"/miq_ae_customization/automate_button_field_changed",
																			:xml_combo=>@edit[:new][:button_images]
																			}
						%>
				</td>
			</tr>
      <tr>
        <td class="key">Dialog</td>
        <td class="wide">
          <%= select_tag('dialog_id',
                         options_for_select(([["<None>",nil]]) + Array(@edit[:new][:available_dialogs].invert).sort{|a,b|a.first.downcase<=>b.first.downcase},
                                            @edit[:new][:dialog_id]),
                         "data-miq_sparkle_on"=>true,
                         "data-miq_observe"=>{:url=>url}.to_json) %>
        </td>
      </tr>
		</table>
	</fieldset>

	<%= render :partial => "layouts/ae_resolve_options", :locals=>{:resolve=>@edit, :form_action=>"ae_resolve", :ae_custom_button=>true, :field_changed_url=>"automate_button_field_changed"} %>

	<%= render :partial => "layouts/role_visibility", :locals=>{:rec_id=>"#{@custom_button.id || "new"}", :action=>"automate_button_field_changed"} %>
  <%# Need this to bind checkbox observers when under DHTMLX tabs %>
  <%# TODO: Remove when DHTMLX tabs are converted to jQuery tabs  %>
  <script>miqObserveCheckboxes();</script>
</div>

