<%# New code to use DHTMLXGRID below %>
<% if @grid_xml %>
  <% if @showlinks == false %>
    <% url = nil %><%# disabling link in grid %>
  <% else %>
    <% url = view_to_url(view, @parent) %>
  <% end  %>
  <% if @explorer %>
    <div id="list_grid" style="cursor:hand;"></div>
    <% ajax_url =
        !(%w(OntapStorageSystem
            OntapLogicalDisk
            OntapStorageVolume
            OntapFileShare
            SecurityGroup).include?(view.db) ||
        (request.parameters[:controller] == "service" && view.db == "Vm"))
    %>
    <%# don't need a row url to be AJAX when displaying a list of other CI's inside explorer %>
    <%= render(:partial => 'layouts/dhtmlxgrid',
               :locals  => {:options => {:grid_id         => "list_grid",
                                         :grid_name       => "gtl_list_grid",
                                         :grid_xml        => @grid_xml,
                                         :row_url         => url,
                                         :row_url_ajax    => ajax_url,
                                         :action_url      => action_url,
                                         :save_col_widths => true,
                                         :autosize        => true,  # Need this when list_grid div has no width/height specified
                                         :skin            => "style3",
                                         :sortcol         => @sortcol ? @sortcol + 2 : nil,
                                         :sortdir         => @sortdir ? @sortdir[0..2]: nil,
                                         :alt_row         => true
                                        }})
    %>
  <% else %>
    <%# substracting leftcol 219 from @winW to calculate width of div %>
    <div id="list_grid" style="width:<%= @winW - 219 %>;height:<%= center_div_height %>px;cursor:hand;overflow-x:auto;overflow-y:auto"></div>
    <%= render(:partial => 'layouts/dhtmlxgrid',
               :locals  => {:options => {:grid_id         => "list_grid",
                                         :grid_name       => "gtl_list_grid",
                                         :grid_xml        => @grid_xml,
                                         :row_url         => url,
                                         :action_url      => action_url,
                                         :save_col_widths => true,
                                         :skin            => "style3",
                                         :sortcol         => @sortcol ? @sortcol + 2 : nil,
                                         :sortdir         => @sortdir ? @sortdir[0..2] : nil,
                                         :alt_row         => true
                                         }})
    %>
  <% end %>
<% else %>
    <table class="style3">
      <thead>
        <tr>
          <% unless @embedded || @no_checkboxes %>
            <th class="checkbox">&nbsp;</th>
          <% end %>
          <% unless @no_listicon %>
            <th class="icon">&nbsp;</th>
          <% end %>
          <% view.headers.each_with_index do |h,i| %>
            <% if ! @embedded && @pages %>
            <%# # Replaced to exclude non-view table fields from sorting %>
            <%# if ! @embedded && @pages && view.extras[:sort_fields].include?(h) %>
              <% if i == @sortcol %>
                <th nowrap
                  <% if @sortdir == "ASC" %>
                    class="sorting_asc"
                  <% else %>
                    class="sorting_desc"
                  <% end %>
                >
                  <%= link_to(h(h),
                              {:action      => action_url, 
                               :sort_choice => h},
                              "data-miq_sparkle_on"  => true,
                              "data-miq_sparkle_off" => true,
                              :remote                => true) 
                  %>
                </th>
              <% else %>
                <th nowrap>
                  <%= link_to(h(h),
                          {:action      => action_url, 
                           :sort_choice => h},
                          "data-miq_sparkle_on"  => true,
                          "data-miq_sparkle_off" => true,
                          :remote                => true) 
                  %>
               </th>
               <% end %>
            <% else %><%# Disable column sorting when embedded , for now %>
              <th nowrap>
                <%= h(h) %>
              </th>
            <% end %>
          <% end %>
        </tr>
        <% if get_vmdb_config[:product][:vmdb_connections_filter] && view.db == "VmdbDatabaseConnection" %>
        <tr>
          <% unless @embedded || @no_checkboxes %>
            <th class="checkbox">&nbsp;</th>
          <% end %>
          <% unless @no_listicon %>
            <th class="icon">&nbsp;</th>
          <% end %>
          <% view.col_order.each do |col| %>
            <th nowrap>
              <% if ["zone.name", "miq_worker.type", "address"].include?(col) %>
                <% url = url_for(:action => 'list_view_filter') %>
                <% if col == 'address'  %>
                  <% if false %>
                    <div id="filterbox"><%# Name based search box %>
                      <%= text_field("filter", "text", 
                                     :id              => "filter_text",
                                     :onkeypress      => "if(miqEnterPressed(event)) miqSearchByName();",
                                     :value           => @sb[:filter_text], 
                                     :alt             => "Filter by IPAdrress within results",
                                     :title           => "Filter by IPAdrress within results", 
                                     "data-miq_focus" => true)
                      %>
                      <%= link_to(image_tag('/images/layout/search.gif',
                                            :id    => "filtericon", 
                                            :name  => "search_button",
                                            :alt   => "Filter by IPAdrress within results",
                                            :class => "nameonly"),
                                  {:action => "list_view_filter", 
                                   :button => "search_button"},
                                  "data-miq_sparkle_on" => true,
                                  "data-submit"         => 'filterbox',
                                  :remote               => true,
                                  :title                => "Filter by IPAdrress within results")
                      %>
                    </div>
                  <% end %>
                <% elsif col == "zone.name" %>
                  <%= select_tag('zone_name',
                                 options_for_select([["<All>", "all"]] + @zones, @sb[:zone_name]),
                                 "data-miq_observe" => {:url => url}.to_json) 
                  %>
                <% elsif col == "miq_worker.type" %>
                  <%#= select_tag('worker_type',
                                 options_for_select(["<Choose>",nil] + @workers),
                                 "data-miq_observe"=>{:url=>url}.to_json) %>
                <% end %>
              <% end %>
            </th>
          <% end %>
        </tr>
        <% end %>
      </thead>
      <tbody>
        <% table.data[@first_item..@last_item].each_with_index do |row,i| %>
          <% @id = to_cid(row['id']) %>
          <% cls = view.db == "MiqWorker" && @sb[:selected_worker_id].to_i == row['id'].to_i ? "row3" : cycle('row0', 'row1') %>
          <tr class="<%= cls %>">
            <% cursor = ["MiqEvent", "MiqTask", "VmdbDatabaseConnection", "VmdbDatabaseSetting"].include?(view.db) ? "default" : "pointer" %>
            <% unless @embedded || @no_checkboxes %>
              <td class="checkbox" style="cursor:<%=cursor%>;">
                <%= check_box_tag("check_#{@id}", 
                                  value=1,
                                  checked=false, 
                                  :id      => "listcheckbox", 
                                  :onclick => "miqUpdateButtons(this,'#{button_div}');") 
                %>
              </td>
            <% end %>
            <% unless @no_listicon %>
              <td class="icon"  onmouseover="ChangeColor(this, true);this.style.cursor='<%=cursor%>';" onmouseout="ChangeColor(this, false);"
                <% unless (@embedded || @no_checkboxes) && ! @showlinks %>
                  <%# Don't put a td URL for the server_build list view %>
                  <%# if view.db == "ProductUpdate" || view.db == "ServerBuild" || view.db == "MiqTask" || view.db == "MiqEvent" %>
                  <% if ["ProductUpdate", "ServerBuild", "MiqTask","MiqEvent", "VmdbDatabaseConnection", "VmdbDatabaseSetting"].include?(view.db) %>
                  <% elsif view.db == "MiqProvision" %>
                        <% rec = @targets_hash[row['id']] if @targets_hash %>
                        <% unless rec.destination_id.blank? %>
                            onclick="DoNav('<%= "/vm/show/#{to_cid(rec.destination_id)}" %>');"
                            title="Click to view this VM"
                        <% end %>
                  <% elsif view.db == "Job" %>
                    onclick="DoNav('<%= "/vm/show/#{to_cid(row["target_id"])}" %>');"
                  <% elsif @vm %>
                    onclick="DoNav('<%= "/vm/" << @listicon.pluralize << "/" << @vm.id.to_s << "?show=" << @id.to_s %>');"
                  <% elsif view.db == "Action" %>
                    onclick="DoNav('<%= url_for_db("miq_action") %>');"
                  <% elsif view.db == "LdapRegion" %>
                    onclick="cfmeDynatree_activateNode('settings_tree', 'lr-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqAction" %>
                    onclick="cfmeDynatree_activateNode('action_tree', 'a-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqAlert" %>
                    onclick="cfmeDynatree_activateNode('alert_tree', 'al-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqPolicy" %>
                    onclick="cfmeDynatree_activateNode('policy_tree', '<%= x_node %>_p-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "User" %>
                    onclick="cfmeDynatree_activateNode('rbac_tree', 'u-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqGroup" %>
                    onclick="cfmeDynatree_activateNode('rbac_tree', 'g-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqUserRole" %>
                    onclick="cfmeDynatree_activateNode('rbac_tree', 'ur-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "VmdbTableEvm" %>
                    onclick="cfmeDynatree_activateNode('vmdb_tree', 'tb-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "VmdbIndex" %>
                      onclick="<%= remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true") %>;"
                  <% elsif view.db == "MiqServer" %>
                      onclick="cfmeDynatree_activateNode('diagnostics_tree', 'svr-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqSchedule" %>
                    <% if x_active_tree == :settings_tree %>
                      onclick="cfmeDynatree_activateNode('settings_tree', 'msc-<%= to_cid(row['id'])%>');"
                    <% elsif x_active_tree == "schedule" %>
                      onclick="cfmeDynatree_activateNode('schedules_tree','msc-<%= to_cid(row['id']) %>');"
                    <% end %>
                  <% elsif view.db == "MiqReportResult" %>
                    <% if x_active_tree == :savedreports_tree %>
                      <% if x_node .split('-').length == 1 %>
                        onclick="<%= remote_function(:loading => "miqSparkle(true);", :complete => "miqSparkle(false);",
                                    :url => {:action => 'get_report', :id => "rr-#{to_cid(row['id'])}"}) %>"
                      <% else %>
                        onclick="cfmeDynatree_activateNode('savedreports_tree', 'rr-<%= to_cid(row['id'])%>');"
                      <% end %>
                    <% elsif x_active_tree == :reports_tree %>
                        onclick="cfmeDynatree_activateNode('reports_tree', '<%=x_node%>_rr-<%= to_cid(row['id'])%>');"
                    <% end %>
                  <% elsif view.db == "MiqWidget" %>
                      <% typ = WIDGET_CONTENT_TYPE.invert[row['content_type']] %>
                      onclick="cfmeDynatree_activateNode('widgets_tree', 'xx-<%=typ%>_-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "IsoDatastore" %>
                      onclick="cfmeDynatree_activateNode('iso_datastores_tree', 'isd-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "PxeServer" %>
                    onclick="cfmeDynatree_activateNode('pxe_servers_tree', 'ps-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "PxeImageType" %>
                    onclick="cfmeDynatree_activateNode('pxe_image_types_tree', 'pit-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "CustomizationTemplate" %>
                      onclick="cfmeDynatree_activateNode('customization_templates_tree', 'ct-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "ScanItemSet" %>
                    onclick="cfmeDynatree_activateNode('settings_tree', 'sis-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "ChargebackRate" %>
                    onclick="cfmeDynatree_activateNode('<%=x_active_tree%>', '<%= x_node%>_cr-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqDialog" %>
                    onclick="cfmeDynatree_activateNode('old_dialogs_tree', '<%=X_TREE_NODE_PREFIXES.invert["MiqDialog"]%>-<%= to_cid(row['id'])%>');"
                  <% elsif view.db == "MiqWorker" %>
                    onclick="<%= remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"}) %>"
                  <% else %>
                    onclick="DoNav('<%= url_for_db(view.db) %>');"
                  <% end %>
                <% end %>
                nowrap>
                <%= render(:partial   => "layouts/listicon", 
                          :locals     => {:db         => view.db, 
                                          :row        => row, 
                                          :icon_image => listicon_image})
                %>
              </td>
            <% end %>
            <% view.col_order.each do |col| %>
              <td onmouseover="ChangeColor(this, true);this.style.cursor='<%=cursor%>';" onmouseout="ChangeColor(this, false);"
                <% unless (@embedded || @no_checkboxes) && ! @showlinks %>
                  <% if view.db == "MiqTask" || view.db == "MiqEvent" %>
                  <%# if ["MiqTask","MiqEvent","VmdbDatabaseSetting"].include?(view.db) %>
                  <%# elsif view.db == "MiqSchedule" %>
                      <%# rec = @targets_hash[row['id']] if @targets_hash %>
                  <% elsif view.db == "MiqProvision" %>
                      <% rec = @targets_hash[row['id']] if @targets_hash %>
                      <% unless rec.destination_id.blank? %>
                          onclick="DoNav('<%= "/vm/show/#{to_cid(rec.destination_id)}" %>');"
                          title="Click to view this VM"
                      <% else %>
                      <% end %>
                  <% elsif view.db == "Job" %>
                    <% if col.include?("agent_") %>
                      <% if !row['agent_class'].nil? && row['agent_class'] != "" %>
                        <% a_rec = @targets_hash[row['agent_id']] if @targets_hash %>
                        <% if a_rec.nil? %>
                          title="<%= row['agent_class'] %> record no longer exists"
                        <% else %>
                          <% if row['agent_class'] != "MiqServer" %>
                            onclick="DoNav('<%= "/#{row['agent_class'].underscore}/show/#{to_cid(row['agent_id'])}" %>');"
                            title="Click to view <%= h(row['agent_class'] + "<" + a_rec.name + ">") %>"
                          <% end %>
                        <% end %>
                      <% end %>
                    <% else %>
                      <% if row['target_id'].blank? %>
                        title="No task target captured"
                      <% else %>
                        <% target_class = row['target_class'] %>
                        <% action = target_class.to_s == "VmOrTemplate" ? "vm_show" : "show" %>
                        onclick="DoNav('<%= "/#{target_class.constantize.base_class.name.underscore.downcase}/#{action}/#{to_cid(row['target_id'])}" %>');"
                        title="Click to view target <%= h(ui_lookup(:model => target_class.constantize.base_class.name)) %>"
                      <% end %>
                    <% end %>
                  <% elsif ["total_space", "free_space"].include?(col) %>
                      title="<%= number_with_delimiter(h(row[col]),:delimiter => ",",:separator => ".") %> bytes"
                  <% else %>
                      <% if (row[col].is_a?(Time) || ["updated_on", "created_on", "started_on", "finished_on"].include?(col)) && !row[col].nil? && row[col] != "" %>
                        <% row[col] = row[col].to_time if row[col].kind_of?(String)%>
                      <% end  %>
                      <% if row[col].is_a?(Time) %>
                        title="<%= h(format_timezone(row[col],Time.zone,"gtl")) %>"
                      <% else %>
                        title="<%= h(row[col]) %>"
                      <% end %>
                    <% if @vm %>
                      onclick="DoNav('<%= "/vm/" << @listicon.pluralize << "/" << @vm.id.to_s << "?show=" << @id.to_s %>');"
                    <% elsif ["VmdbDatabaseConnection", "VmdbDatabaseSetting"].include?(view.db) %><%# No onclick for DB settings %>
                    <% elsif view.db == "LdapRegion" %>
                      onclick="cfmeDynatree_activateNode('settings_tree', 'lr-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqAction" %>
                      onclick="cfmeDynatree_activateNode('action_tree', 'a-<%= to_cid(row['id']) %>');"
                    <% elsif view.db == "MiqAlert" %>
                      onclick="cfmeDynatree_activateNode('alert_tree', 'al-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqPolicy" %>
                      onclick="cfmeDynatree_activateNode('policy_tree', '<%= x_node %>_p-<%= to_cid(row['id']) %>');"
                    <% elsif view.db == "User" %>
                      onclick="cfmeDynatree_activateNode('rbac_tree', 'u-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqGroup" %>
                      onclick="cfmeDynatree_activateNode('rbac_tree', 'g-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqUserRole" %>
                      onclick="cfmeDynatree_activateNode('rbac_tree', 'ur-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "VmdbTableEvm" %>
                      onclick="cfmeDynatree_activateNode('vmdb_tree', 'tb-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "VmdbIndex" %>
                      onclick="<%= remote_function(:url => "/ops/x_show/#{to_cid(row['id'])}?list=true") %>;"
                    <% elsif view.db == "MiqServer" %>
                      onclick="cfmeDynatree_activateNode('diagnostics_tree', 'svr-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqSchedule" %>
                      <% rec = @targets_hash[row['id']] if @targets_hash %>
                      <% if x_active_tree == :settings_tree %>
                        onclick="cfmeDynatree_activateNode('settings_tree', 'msc-<%= to_cid(row['id'])%>');"
                      <% elsif x_active_tree == :schedules_tree %>
                        onclick="cfmeDynatree_activateNode('schedules_tree', 'msc-<%= to_cid(row['id']) %>');"
                      <% end %>
                    <% elsif view.db == "MiqReportResult" %>
                      <% if x_active_tree == :savedreports_tree %>
                        <% if x_node .split('-').length == 1 %>
                          onclick="<%= remote_function(:loading => "miqSparkle(true);", :complete => "miqSparkle(false);",
                                                :url => {:action => 'get_report', :id => "rr-#{to_cid(row['id'])}"}) %>"
                        <% else %>
                          onclick="cfmeDynatree_activateNode('savedreports_tree', 'rr-<%= to_cid(row['id'])%>');"
                        <% end %>
                      <% elsif x_active_tree == :reports_tree %>
                        onclick="cfmeDynatree_activateNode('reports_tree', '<%=x_node%>_rr-<%= to_cid(row['id'])%>');"
                      <% end %>
                    <% elsif view.db == "MiqWidget" %>
                      <% typ = WIDGET_CONTENT_TYPE.invert[row['content_type']] %>
                      onclick="cfmeDynatree_activateNode('widgets_tree', 'xx-<%=typ%>_-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "IsoDatastore" %>
                      onclick="cfmeDynatree_activateNode('iso_datastores_tree', 'isd-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "PxeServer" %>
                      onclick="cfmeDynatree_activateNode('pxe_servers_tree', 'ps-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "PxeImageType" %>
                      onclick="cfmeDynatree_activateNode('pxe_image_types_tree', 'pit-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "CustomizationTemplate" %>
                      onclick="cfmeDynatree_activateNode('customization_templates_tree', 'ct-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "ScanItemSet" %>
                      onclick="cfmeDynatree_activateNode('settings_tree', 'sis-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "ChargebackRate" %>
                      onclick="cfmeDynatree_activateNode('<%=x_active_tree%>', '<%= x_node%>_cr-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqDialog" %>
                      onclick="cfmeDynatree_activateNode('old_dialogs_tree', '<%=X_TREE_NODE_PREFIXES.invert["MiqDialog"]%>-<%= to_cid(row['id'])%>');"
                    <% elsif view.db == "MiqWorker" %>
                      onclick="<%= remote_function(:url => {:action => 'diagnostics_worker_selected', :id => "#{row['id']}"}) %>"
                    <% else %>
                      <% if view.db == "Action" %>
                        onclick="DoNav('<%= url_for_db("miq_action") %>');"
                      <% else %>
                        <% if @edit && @edit[:hostitems] %>
                          onclick="DoNav('/host/edit/?selected_host=<%= @id %>');"
                        <% else %>
                          onclick="DoNav('<%= url_for_db(view.db) %>');"
                        <% end %>
                      <% end %>
                    <% end %>
                  <% end %>
                <% end %>
                <% if ["message"].include?(col) %>
                  wrap>
                <% elsif ["comment"].include?(col) %>
                  wrap>
                <% elsif ["data", "name"].include?(col) && row[col] != nil && view.db == "RegistryItems" %>
                  wrap>
                <% elsif ["name"].include?(col) && row[col] != nil && view.db == "MiqReportResult" %>
                  wrap>
                <% else %>
                  nowrap>
                <% end %>
                <% if ["updated_on", "created_on", "started_on", "last_scan_on", "finished_on"].include?(col) &&
                      !row[col].blank? %>
                  <% row[col] = row[col].to_time if row[col].kind_of?(String)%>
                <% end  %>
                <% if ["state", "status"].include?(col) && row[col] != nil && view.db == "Job" %>
                  <center><%= h(row[col].capitalize) %></center>
                <% elsif ["agent_class"].include?(col) && row[col] != nil && view.db == "Job" %>
                  <% unless row['agent_class'].blank? %>
                    <% if a_rec.nil? %>
                      <%= row['agent_class'] %> record no longer exists
                    <% else %>
                      <center><%= h(a_rec.name) %></center>
                    <% end %>
                  <% end %>
                <% elsif ["free_space", "total_space", "size"].include?(col) && row[col] != nil %>
                  <center><%= h(number_to_human_size(row[col], :precision => 2)) %></center>
                <% elsif ["group_count"].include?(col) && row[col] != nil %>
                  <center><%= h(row[col]) %></center>
                <% elsif row[col].is_a?(Time) && row[col] != nil %>
                  <center>
                  <% unless row[col].blank? %>
                    <% if view.db == "MiqSchedule" %>
                      <% celltz = rec.run_at[:tz] if rec && rec.run_at %>
                    <% end %>
                    <%= h(format_timezone(row[col], celltz || Time.zone, "gtl")) %>
                  <% end %>
                  </center>
                <% else %>
                  <% if ["Account", "SystemService", "Patch", "GuestApplication"].include?(view.db) %>
                    <%=h(row[col].to_s.length < 18 ? row[col] : row[col].to_s[0..13] + "...")%>
                  <% elsif ["RegistryItems"].include?(view.db) && ["data"].include?(col) %>
                    <%=h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")%>
                  <% elsif ["Filesystem"].include?(view.db) && ["name"].include?(col) %>
                    <%=h(row[col].to_s.length < 50 ? row[col] : row[col].to_s[0..50] + "...")%>
                  <% else %>
                    <% if row[col].is_a?(Time) && row[col] != nil && row[col] != "" %>
                      <%=h(format_timezone(row[col], Time.zone, "gtl"))%>
                    <% else %>
                      <% tz = ["miqschedule"].include?(view.db.downcase) ? MiqServer.my_server.get_config("vmdb").config.fetch_path(:server, :timezone) || "UTC" : Time.zone %>
                      <% col_data = view.format(col,
                                row[col],
                                :tz => celltz || tz
                                ).gsub(/\\/, '\&')
                                %>
                      <%= h(col_data) %>
                    <% end %>
                  <% end %>
                <% end %>
              </td>
            <% end %>
          </tr>
        <% end %>
      </tbody>
    </table>
<% end %>
