#!/usr/bin/env ruby
require_relative 'environment'
require 'optparse'

options = {:do_tests => true, :do_db => true}
OptionParser.new do |opts|
  opts.banner = "Usage: setup [options]"
  opts.on("-d", "--no-db", "Do not prepare db") do
    options[:do_db] = false
  end
  opts.on("-t", "--no-tests", "Do not perform tests") do
    options[:do_tests] = false
  end
  opts.on("-h", "--help", "Displays this help") do
    puts opts
    exit
  end
end.parse!

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

chdir Environment::APP_ROOT do
  # This script is a starting point to setup your application.
  # Add necessary setup steps to this file.
  Environment.ensure_config_files

  puts '== Installing dependencies =='
  Environment.while_updating_bower do
    system! 'gem install bundler --conservative'
    system('bundle check') || system!('bundle install')

    if options[:do_db]
      # Note, we deviate from the default rails db:setup here because
      # it invokes the db:setup rake task which creates the db from the
      # schema (and seeds it), but doesn't run through migrations.
      puts "\n== Preparing database =="
      system! "bin/rails db:create"

      puts "\n== Migrating database =="
      system! "bin/rails db:migrate"

      puts "\n== Seeding database =="
      system! "bin/rails db:seed GOOD_MIGRATIONS=skip"
    end

    if options[:do_tests]
      puts "\n== Preparing tests =="
      system! "bin/rails test:vmdb:setup"
    end
  end

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'
end
